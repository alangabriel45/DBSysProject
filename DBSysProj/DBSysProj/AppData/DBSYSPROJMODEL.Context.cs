//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DBSysProj.AppData
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class DBSYSPROJEntities : DbContext
    {
        public DBSYSPROJEntities()
            : base("name=DBSYSPROJEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Cart> Cart { get; set; }
        public DbSet<CheckOut> CheckOut { get; set; }
        public DbSet<Hotel> Hotel { get; set; }
        public DbSet<Role> Role { get; set; }
        public DbSet<RoomAc> RoomAc { get; set; }
        public DbSet<RoomBed> RoomBed { get; set; }
        public DbSet<RoomMax> RoomMax { get; set; }
        public DbSet<RoomMin> RoomMin { get; set; }
        public DbSet<Rooms> Rooms { get; set; }
        public DbSet<RoomType> RoomType { get; set; }
        public DbSet<UserAccount> UserAccount { get; set; }
        public DbSet<vw_AllRooms> vw_AllRooms { get; set; }
        public DbSet<vw_CheckOutTable> vw_CheckOutTable { get; set; }
        public DbSet<vw_AllUsers> vw_AllUsers { get; set; }
        public DbSet<vw_Rooms> vw_Rooms { get; set; }
    
        public virtual int sp_InsertRoom(string roomNum, string roomType, string roomAc, Nullable<int> roomBed, Nullable<int> roomMin, Nullable<int> roomMax, Nullable<int> hotelId)
        {
            var roomNumParameter = roomNum != null ?
                new ObjectParameter("RoomNum", roomNum) :
                new ObjectParameter("RoomNum", typeof(string));
    
            var roomTypeParameter = roomType != null ?
                new ObjectParameter("RoomType", roomType) :
                new ObjectParameter("RoomType", typeof(string));
    
            var roomAcParameter = roomAc != null ?
                new ObjectParameter("RoomAc", roomAc) :
                new ObjectParameter("RoomAc", typeof(string));
    
            var roomBedParameter = roomBed.HasValue ?
                new ObjectParameter("RoomBed", roomBed) :
                new ObjectParameter("RoomBed", typeof(int));
    
            var roomMinParameter = roomMin.HasValue ?
                new ObjectParameter("RoomMin", roomMin) :
                new ObjectParameter("RoomMin", typeof(int));
    
            var roomMaxParameter = roomMax.HasValue ?
                new ObjectParameter("RoomMax", roomMax) :
                new ObjectParameter("RoomMax", typeof(int));
    
            var hotelIdParameter = hotelId.HasValue ?
                new ObjectParameter("HotelId", hotelId) :
                new ObjectParameter("HotelId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertRoom", roomNumParameter, roomTypeParameter, roomAcParameter, roomBedParameter, roomMinParameter, roomMaxParameter, hotelIdParameter);
        }
    
        public virtual int sp_AddRoom(string rNum, string rType, string rAc, Nullable<int> rBed, Nullable<int> rMin, Nullable<int> rMax, Nullable<int> hId)
        {
            var rNumParameter = rNum != null ?
                new ObjectParameter("rNum", rNum) :
                new ObjectParameter("rNum", typeof(string));
    
            var rTypeParameter = rType != null ?
                new ObjectParameter("rType", rType) :
                new ObjectParameter("rType", typeof(string));
    
            var rAcParameter = rAc != null ?
                new ObjectParameter("rAc", rAc) :
                new ObjectParameter("rAc", typeof(string));
    
            var rBedParameter = rBed.HasValue ?
                new ObjectParameter("rBed", rBed) :
                new ObjectParameter("rBed", typeof(int));
    
            var rMinParameter = rMin.HasValue ?
                new ObjectParameter("rMin", rMin) :
                new ObjectParameter("rMin", typeof(int));
    
            var rMaxParameter = rMax.HasValue ?
                new ObjectParameter("rMax", rMax) :
                new ObjectParameter("rMax", typeof(int));
    
            var hIdParameter = hId.HasValue ?
                new ObjectParameter("hId", hId) :
                new ObjectParameter("hId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddRoom", rNumParameter, rTypeParameter, rAcParameter, rBedParameter, rMinParameter, rMaxParameter, hIdParameter);
        }
    
        public virtual int sp_InsertRoom1(string roomNumber, string roomType, string roomAc, Nullable<int> roomBed, Nullable<int> roomMin, Nullable<int> roomMax, Nullable<int> hotelId)
        {
            var roomNumberParameter = roomNumber != null ?
                new ObjectParameter("roomNumber", roomNumber) :
                new ObjectParameter("roomNumber", typeof(string));
    
            var roomTypeParameter = roomType != null ?
                new ObjectParameter("roomType", roomType) :
                new ObjectParameter("roomType", typeof(string));
    
            var roomAcParameter = roomAc != null ?
                new ObjectParameter("roomAc", roomAc) :
                new ObjectParameter("roomAc", typeof(string));
    
            var roomBedParameter = roomBed.HasValue ?
                new ObjectParameter("roomBed", roomBed) :
                new ObjectParameter("roomBed", typeof(int));
    
            var roomMinParameter = roomMin.HasValue ?
                new ObjectParameter("roomMin", roomMin) :
                new ObjectParameter("roomMin", typeof(int));
    
            var roomMaxParameter = roomMax.HasValue ?
                new ObjectParameter("roomMax", roomMax) :
                new ObjectParameter("roomMax", typeof(int));
    
            var hotelIdParameter = hotelId.HasValue ?
                new ObjectParameter("hotelId", hotelId) :
                new ObjectParameter("hotelId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertRoom1", roomNumberParameter, roomTypeParameter, roomAcParameter, roomBedParameter, roomMinParameter, roomMaxParameter, hotelIdParameter);
        }
    
        public virtual int sp_UpdateRoom(Nullable<int> rId, string rNum, string rType, string rAc, Nullable<int> rBed, Nullable<int> rMin, Nullable<int> rMax, Nullable<int> hId)
        {
            var rIdParameter = rId.HasValue ?
                new ObjectParameter("rId", rId) :
                new ObjectParameter("rId", typeof(int));
    
            var rNumParameter = rNum != null ?
                new ObjectParameter("rNum", rNum) :
                new ObjectParameter("rNum", typeof(string));
    
            var rTypeParameter = rType != null ?
                new ObjectParameter("rType", rType) :
                new ObjectParameter("rType", typeof(string));
    
            var rAcParameter = rAc != null ?
                new ObjectParameter("rAc", rAc) :
                new ObjectParameter("rAc", typeof(string));
    
            var rBedParameter = rBed.HasValue ?
                new ObjectParameter("rBed", rBed) :
                new ObjectParameter("rBed", typeof(int));
    
            var rMinParameter = rMin.HasValue ?
                new ObjectParameter("rMin", rMin) :
                new ObjectParameter("rMin", typeof(int));
    
            var rMaxParameter = rMax.HasValue ?
                new ObjectParameter("rMax", rMax) :
                new ObjectParameter("rMax", typeof(int));
    
            var hIdParameter = hId.HasValue ?
                new ObjectParameter("hId", hId) :
                new ObjectParameter("hId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateRoom", rIdParameter, rNumParameter, rTypeParameter, rAcParameter, rBedParameter, rMinParameter, rMaxParameter, hIdParameter);
        }
    
        public virtual int sp_DeleteRoom(Nullable<int> rId)
        {
            var rIdParameter = rId.HasValue ?
                new ObjectParameter("rId", rId) :
                new ObjectParameter("rId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteRoom", rIdParameter);
        }
    
        public virtual int sp_DeleteRooms(Nullable<int> rId, Nullable<int> rRow)
        {
            var rIdParameter = rId.HasValue ?
                new ObjectParameter("rId", rId) :
                new ObjectParameter("rId", typeof(int));
    
            var rRowParameter = rRow.HasValue ?
                new ObjectParameter("rRow", rRow) :
                new ObjectParameter("rRow", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteRooms", rIdParameter, rRowParameter);
        }
    
        public virtual int sp_DeleteRoom1(Nullable<int> rId)
        {
            var rIdParameter = rId.HasValue ?
                new ObjectParameter("rId", rId) :
                new ObjectParameter("rId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteRoom1", rIdParameter);
        }
    
        public virtual int sp_AddUserAccount(string lName, string fNam, string mInitial, string uAddress, string uEmail, string uPhone, string uName, string uPass)
        {
            var lNameParameter = lName != null ?
                new ObjectParameter("lName", lName) :
                new ObjectParameter("lName", typeof(string));
    
            var fNamParameter = fNam != null ?
                new ObjectParameter("fNam", fNam) :
                new ObjectParameter("fNam", typeof(string));
    
            var mInitialParameter = mInitial != null ?
                new ObjectParameter("mInitial", mInitial) :
                new ObjectParameter("mInitial", typeof(string));
    
            var uAddressParameter = uAddress != null ?
                new ObjectParameter("uAddress", uAddress) :
                new ObjectParameter("uAddress", typeof(string));
    
            var uEmailParameter = uEmail != null ?
                new ObjectParameter("uEmail", uEmail) :
                new ObjectParameter("uEmail", typeof(string));
    
            var uPhoneParameter = uPhone != null ?
                new ObjectParameter("uPhone", uPhone) :
                new ObjectParameter("uPhone", typeof(string));
    
            var uNameParameter = uName != null ?
                new ObjectParameter("uName", uName) :
                new ObjectParameter("uName", typeof(string));
    
            var uPassParameter = uPass != null ?
                new ObjectParameter("uPass", uPass) :
                new ObjectParameter("uPass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddUserAccount", lNameParameter, fNamParameter, mInitialParameter, uAddressParameter, uEmailParameter, uPhoneParameter, uNameParameter, uPassParameter);
        }
    
        public virtual int sp_DeleteUserAccount(Nullable<int> uId)
        {
            var uIdParameter = uId.HasValue ?
                new ObjectParameter("uId", uId) :
                new ObjectParameter("uId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteUserAccount", uIdParameter);
        }
    
        public virtual int sp_UpdateUserAccount(string lName, string fNam, string mInitial, string uAddress, string uEmail, string uPhone, string uName, string uPass)
        {
            var lNameParameter = lName != null ?
                new ObjectParameter("lName", lName) :
                new ObjectParameter("lName", typeof(string));
    
            var fNamParameter = fNam != null ?
                new ObjectParameter("fNam", fNam) :
                new ObjectParameter("fNam", typeof(string));
    
            var mInitialParameter = mInitial != null ?
                new ObjectParameter("mInitial", mInitial) :
                new ObjectParameter("mInitial", typeof(string));
    
            var uAddressParameter = uAddress != null ?
                new ObjectParameter("uAddress", uAddress) :
                new ObjectParameter("uAddress", typeof(string));
    
            var uEmailParameter = uEmail != null ?
                new ObjectParameter("uEmail", uEmail) :
                new ObjectParameter("uEmail", typeof(string));
    
            var uPhoneParameter = uPhone != null ?
                new ObjectParameter("uPhone", uPhone) :
                new ObjectParameter("uPhone", typeof(string));
    
            var uNameParameter = uName != null ?
                new ObjectParameter("uName", uName) :
                new ObjectParameter("uName", typeof(string));
    
            var uPassParameter = uPass != null ?
                new ObjectParameter("uPass", uPass) :
                new ObjectParameter("uPass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateUserAccount", lNameParameter, fNamParameter, mInitialParameter, uAddressParameter, uEmailParameter, uPhoneParameter, uNameParameter, uPassParameter);
        }
    
        public virtual int sp_UpdateUser(Nullable<int> uId, string lName, string fName, string mInitial, string uAddress, string uEmail, string uPhone, string uName, string uPass)
        {
            var uIdParameter = uId.HasValue ?
                new ObjectParameter("uId", uId) :
                new ObjectParameter("uId", typeof(int));
    
            var lNameParameter = lName != null ?
                new ObjectParameter("lName", lName) :
                new ObjectParameter("lName", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("fName", fName) :
                new ObjectParameter("fName", typeof(string));
    
            var mInitialParameter = mInitial != null ?
                new ObjectParameter("mInitial", mInitial) :
                new ObjectParameter("mInitial", typeof(string));
    
            var uAddressParameter = uAddress != null ?
                new ObjectParameter("uAddress", uAddress) :
                new ObjectParameter("uAddress", typeof(string));
    
            var uEmailParameter = uEmail != null ?
                new ObjectParameter("uEmail", uEmail) :
                new ObjectParameter("uEmail", typeof(string));
    
            var uPhoneParameter = uPhone != null ?
                new ObjectParameter("uPhone", uPhone) :
                new ObjectParameter("uPhone", typeof(string));
    
            var uNameParameter = uName != null ?
                new ObjectParameter("uName", uName) :
                new ObjectParameter("uName", typeof(string));
    
            var uPassParameter = uPass != null ?
                new ObjectParameter("uPass", uPass) :
                new ObjectParameter("uPass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateUser", uIdParameter, lNameParameter, fNameParameter, mInitialParameter, uAddressParameter, uEmailParameter, uPhoneParameter, uNameParameter, uPassParameter);
        }
    
        public virtual int sp_AddUsers(string uLName, string uFName, string uMI, string uA, string uE, string uPN, string uN, string uP, Nullable<int> rId, string cB)
        {
            var uLNameParameter = uLName != null ?
                new ObjectParameter("uLName", uLName) :
                new ObjectParameter("uLName", typeof(string));
    
            var uFNameParameter = uFName != null ?
                new ObjectParameter("uFName", uFName) :
                new ObjectParameter("uFName", typeof(string));
    
            var uMIParameter = uMI != null ?
                new ObjectParameter("uMI", uMI) :
                new ObjectParameter("uMI", typeof(string));
    
            var uAParameter = uA != null ?
                new ObjectParameter("uA", uA) :
                new ObjectParameter("uA", typeof(string));
    
            var uEParameter = uE != null ?
                new ObjectParameter("uE", uE) :
                new ObjectParameter("uE", typeof(string));
    
            var uPNParameter = uPN != null ?
                new ObjectParameter("uPN", uPN) :
                new ObjectParameter("uPN", typeof(string));
    
            var uNParameter = uN != null ?
                new ObjectParameter("uN", uN) :
                new ObjectParameter("uN", typeof(string));
    
            var uPParameter = uP != null ?
                new ObjectParameter("uP", uP) :
                new ObjectParameter("uP", typeof(string));
    
            var rIdParameter = rId.HasValue ?
                new ObjectParameter("rId", rId) :
                new ObjectParameter("rId", typeof(int));
    
            var cBParameter = cB != null ?
                new ObjectParameter("cB", cB) :
                new ObjectParameter("cB", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddUsers", uLNameParameter, uFNameParameter, uMIParameter, uAParameter, uEParameter, uPNParameter, uNParameter, uPParameter, rIdParameter, cBParameter);
        }
    
        public virtual ObjectResult<sp_YourCart_Result> sp_YourCart(Nullable<int> uId)
        {
            var uIdParameter = uId.HasValue ?
                new ObjectParameter("uId", uId) :
                new ObjectParameter("uId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_YourCart_Result>("sp_YourCart", uIdParameter);
        }
    
        public virtual int sp_AddToCart(Nullable<int> rId, Nullable<int> hId, Nullable<int> bId)
        {
            var rIdParameter = rId.HasValue ?
                new ObjectParameter("rId", rId) :
                new ObjectParameter("rId", typeof(int));
    
            var hIdParameter = hId.HasValue ?
                new ObjectParameter("hId", hId) :
                new ObjectParameter("hId", typeof(int));
    
            var bIdParameter = bId.HasValue ?
                new ObjectParameter("bId", bId) :
                new ObjectParameter("bId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddToCart", rIdParameter, hIdParameter, bIdParameter);
        }
    
        public virtual int sp_AddRooms(string rNum, string rType, string rAc, Nullable<int> rBed, Nullable<int> rMin, Nullable<int> rMax, Nullable<int> rPrice, Nullable<int> hId)
        {
            var rNumParameter = rNum != null ?
                new ObjectParameter("rNum", rNum) :
                new ObjectParameter("rNum", typeof(string));
    
            var rTypeParameter = rType != null ?
                new ObjectParameter("rType", rType) :
                new ObjectParameter("rType", typeof(string));
    
            var rAcParameter = rAc != null ?
                new ObjectParameter("rAc", rAc) :
                new ObjectParameter("rAc", typeof(string));
    
            var rBedParameter = rBed.HasValue ?
                new ObjectParameter("rBed", rBed) :
                new ObjectParameter("rBed", typeof(int));
    
            var rMinParameter = rMin.HasValue ?
                new ObjectParameter("rMin", rMin) :
                new ObjectParameter("rMin", typeof(int));
    
            var rMaxParameter = rMax.HasValue ?
                new ObjectParameter("rMax", rMax) :
                new ObjectParameter("rMax", typeof(int));
    
            var rPriceParameter = rPrice.HasValue ?
                new ObjectParameter("rPrice", rPrice) :
                new ObjectParameter("rPrice", typeof(int));
    
            var hIdParameter = hId.HasValue ?
                new ObjectParameter("hId", hId) :
                new ObjectParameter("hId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddRooms", rNumParameter, rTypeParameter, rAcParameter, rBedParameter, rMinParameter, rMaxParameter, rPriceParameter, hIdParameter);
        }
    
        public virtual int sp_UpdateRooms(Nullable<int> rId, string rNum, string rType, string rAc, Nullable<int> rBed, Nullable<int> rMin, Nullable<int> rMax, Nullable<int> rPrice, Nullable<int> hId)
        {
            var rIdParameter = rId.HasValue ?
                new ObjectParameter("rId", rId) :
                new ObjectParameter("rId", typeof(int));
    
            var rNumParameter = rNum != null ?
                new ObjectParameter("rNum", rNum) :
                new ObjectParameter("rNum", typeof(string));
    
            var rTypeParameter = rType != null ?
                new ObjectParameter("rType", rType) :
                new ObjectParameter("rType", typeof(string));
    
            var rAcParameter = rAc != null ?
                new ObjectParameter("rAc", rAc) :
                new ObjectParameter("rAc", typeof(string));
    
            var rBedParameter = rBed.HasValue ?
                new ObjectParameter("rBed", rBed) :
                new ObjectParameter("rBed", typeof(int));
    
            var rMinParameter = rMin.HasValue ?
                new ObjectParameter("rMin", rMin) :
                new ObjectParameter("rMin", typeof(int));
    
            var rMaxParameter = rMax.HasValue ?
                new ObjectParameter("rMax", rMax) :
                new ObjectParameter("rMax", typeof(int));
    
            var rPriceParameter = rPrice.HasValue ?
                new ObjectParameter("rPrice", rPrice) :
                new ObjectParameter("rPrice", typeof(int));
    
            var hIdParameter = hId.HasValue ?
                new ObjectParameter("hId", hId) :
                new ObjectParameter("hId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateRooms", rIdParameter, rNumParameter, rTypeParameter, rAcParameter, rBedParameter, rMinParameter, rMaxParameter, rPriceParameter, hIdParameter);
        }
    
        public virtual int sp_CheckOut(Nullable<int> rId, string cFName, string cLName, string cAddress, string cEmail, string cPhone, Nullable<System.DateTime> cCheckIn, Nullable<System.DateTime> cCheckOut, Nullable<int> cPayment, Nullable<int> cBalance, Nullable<int> bBy)
        {
            var rIdParameter = rId.HasValue ?
                new ObjectParameter("rId", rId) :
                new ObjectParameter("rId", typeof(int));
    
            var cFNameParameter = cFName != null ?
                new ObjectParameter("cFName", cFName) :
                new ObjectParameter("cFName", typeof(string));
    
            var cLNameParameter = cLName != null ?
                new ObjectParameter("cLName", cLName) :
                new ObjectParameter("cLName", typeof(string));
    
            var cAddressParameter = cAddress != null ?
                new ObjectParameter("cAddress", cAddress) :
                new ObjectParameter("cAddress", typeof(string));
    
            var cEmailParameter = cEmail != null ?
                new ObjectParameter("cEmail", cEmail) :
                new ObjectParameter("cEmail", typeof(string));
    
            var cPhoneParameter = cPhone != null ?
                new ObjectParameter("cPhone", cPhone) :
                new ObjectParameter("cPhone", typeof(string));
    
            var cCheckInParameter = cCheckIn.HasValue ?
                new ObjectParameter("cCheckIn", cCheckIn) :
                new ObjectParameter("cCheckIn", typeof(System.DateTime));
    
            var cCheckOutParameter = cCheckOut.HasValue ?
                new ObjectParameter("cCheckOut", cCheckOut) :
                new ObjectParameter("cCheckOut", typeof(System.DateTime));
    
            var cPaymentParameter = cPayment.HasValue ?
                new ObjectParameter("cPayment", cPayment) :
                new ObjectParameter("cPayment", typeof(int));
    
            var cBalanceParameter = cBalance.HasValue ?
                new ObjectParameter("cBalance", cBalance) :
                new ObjectParameter("cBalance", typeof(int));
    
            var bByParameter = bBy.HasValue ?
                new ObjectParameter("bBy", bBy) :
                new ObjectParameter("bBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CheckOut", rIdParameter, cFNameParameter, cLNameParameter, cAddressParameter, cEmailParameter, cPhoneParameter, cCheckInParameter, cCheckOutParameter, cPaymentParameter, cBalanceParameter, bByParameter);
        }
    
        public virtual ObjectResult<sp_CheckOutTable_Result> sp_CheckOutTable(Nullable<int> cId)
        {
            var cIdParameter = cId.HasValue ?
                new ObjectParameter("cId", cId) :
                new ObjectParameter("cId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CheckOutTable_Result>("sp_CheckOutTable", cIdParameter);
        }
    
        public virtual int sp_DeleteCheckOut(Nullable<int> coId)
        {
            var coIdParameter = coId.HasValue ?
                new ObjectParameter("coId", coId) :
                new ObjectParameter("coId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteCheckOut", coIdParameter);
        }
    
        public virtual int sp_UpdateCheckOut(Nullable<int> coId, Nullable<int> rId, string rA, Nullable<System.DateTime> coCI, Nullable<System.DateTime> coCO, Nullable<int> coP, Nullable<int> coB)
        {
            var coIdParameter = coId.HasValue ?
                new ObjectParameter("coId", coId) :
                new ObjectParameter("coId", typeof(int));
    
            var rIdParameter = rId.HasValue ?
                new ObjectParameter("rId", rId) :
                new ObjectParameter("rId", typeof(int));
    
            var rAParameter = rA != null ?
                new ObjectParameter("rA", rA) :
                new ObjectParameter("rA", typeof(string));
    
            var coCIParameter = coCI.HasValue ?
                new ObjectParameter("coCI", coCI) :
                new ObjectParameter("coCI", typeof(System.DateTime));
    
            var coCOParameter = coCO.HasValue ?
                new ObjectParameter("coCO", coCO) :
                new ObjectParameter("coCO", typeof(System.DateTime));
    
            var coPParameter = coP.HasValue ?
                new ObjectParameter("coP", coP) :
                new ObjectParameter("coP", typeof(int));
    
            var coBParameter = coB.HasValue ?
                new ObjectParameter("coB", coB) :
                new ObjectParameter("coB", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateCheckOut", coIdParameter, rIdParameter, rAParameter, coCIParameter, coCOParameter, coPParameter, coBParameter);
        }
    
        public virtual ObjectResult<sp_YourCarts_Result> sp_YourCarts(Nullable<int> uId)
        {
            var uIdParameter = uId.HasValue ?
                new ObjectParameter("uId", uId) :
                new ObjectParameter("uId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_YourCarts_Result>("sp_YourCarts", uIdParameter);
        }
    
        public virtual int sp_DeleteCart(Nullable<int> cId)
        {
            var cIdParameter = cId.HasValue ?
                new ObjectParameter("cId", cId) :
                new ObjectParameter("cId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteCart", cIdParameter);
        }
    
        public virtual ObjectResult<sp_YourCarts1_Result> sp_YourCarts1(Nullable<int> uId)
        {
            var uIdParameter = uId.HasValue ?
                new ObjectParameter("uId", uId) :
                new ObjectParameter("uId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_YourCarts1_Result>("sp_YourCarts1", uIdParameter);
        }
    
        public virtual ObjectResult<sp_YourCarts2_Result> sp_YourCarts2(Nullable<int> uId)
        {
            var uIdParameter = uId.HasValue ?
                new ObjectParameter("uId", uId) :
                new ObjectParameter("uId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_YourCarts2_Result>("sp_YourCarts2", uIdParameter);
        }
    }
}
